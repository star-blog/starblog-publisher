name: 发布StarBlogPublisher
run-name: ${{ github.actor }} 正在发布StarBlogPublisher 🚀

on:
  push:
    tags:
      - "v*.*.*"  # 更明确的版本格式匹配

# 为整个工作流设置权限
permissions:
  contents: write
  id-token: write
  issues: write

jobs:
  # 编译各平台可执行文件
  build-executables:
    strategy:
      fail-fast: false
      matrix:
        kind: ['windows', 'linux', 'macOS']
        include:
          - kind: windows
            os: windows-latest
            target: win-x64
            extension: '.zip'
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
            extension: '.tar.gz'
          - kind: macOS
            os: macos-latest
            target: osx-x64
            extension: '.tar.gz'

    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取所有历史记录用于版本号计算
      
      - name: 提取版本号
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      
      - name: 缓存NuGet包
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      
      - name: 安装Linux依赖
        if: matrix.kind == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang zlib1g-dev libkrb5-dev libfontconfig1-dev libx11-dev libxrandr-dev libxi-dev libxcursor-dev libxinerama-dev

      - name: 设置Windows环境
        if: matrix.kind == 'windows'
        shell: pwsh
        run: |
          Write-Host "设置Windows编译环境..."
          # 确保有最新的开发者工具
          # Windows环境通常已包含必要的构建工具
      
      - name: 恢复依赖
        run: dotnet restore ./StarBlogPublisher/StarBlogPublisher.csproj
      
      - name: AOT编译
        run: |
          echo "正在为 ${{ matrix.kind }} 平台进行AOT编译..."
          dotnet publish ./StarBlogPublisher/StarBlogPublisher.csproj -c Release -r ${{ matrix.target }} --self-contained true /p:PublishAot=true /p:TrimMode=full /p:InvariantGlobalization=true /p:IlcGenerateStackTraceData=false /p:IlcOptimizationPreference=Size /p:IlcFoldIdenticalMethodBodies=true /p:JsonSerializerIsReflectionEnabledByDefault=true /p:Version=${{ steps.get_version.outputs.VERSION }} -o ./publish/${{ matrix.kind }}
      
      - name: 清理调试文件
        shell: bash
        run: |
          echo "清理调试文件以减小发布包大小..."
          cd ./publish/${{ matrix.kind }}
          # 删除Windows调试文件
          rm -f *.pdb
          # 删除Linux调试文件
          rm -f *.dbg
          # 删除macOS调试文件目录
          rm -rf *.dsym
          # 列出剩余文件
          ls -la
      
      - name: 打包Windows可执行文件
        if: matrix.kind == 'windows'
        run: |
          cd ./publish/${{ matrix.kind }}
          7z a -tzip ../../StarBlogPublisher-${{ matrix.kind }}-${{ steps.get_version.outputs.VERSION }}${{ matrix.extension }} *
      
      - name: 打包Linux/macOS可执行文件
        if: matrix.kind != 'windows'
        run: |
          cd ./publish/${{ matrix.kind }}
          tar -czvf ../../StarBlogPublisher-${{ matrix.kind }}-${{ steps.get_version.outputs.VERSION }}${{ matrix.extension }} *
      
      # 上传构建产物作为工作流构件(artifacts)
      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: StarBlogPublisher-${{ matrix.kind }}-${{ steps.get_version.outputs.VERSION }}
          path: ./StarBlogPublisher-${{ matrix.kind }}-${{ steps.get_version.outputs.VERSION }}${{ matrix.extension }}
          retention-days: 1

  # 统一上传所有平台可执行文件到GitHub Release
  upload-to-release:
    needs: build-executables
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整的git历史记录
      
      - name: 提取版本号
        id: get_version
        shell: bash
        run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
      - name: 生成Release Notes
        id: generate_notes
        shell: bash
        run: |
          # 获取当前tag
          CURRENT_TAG=${GITHUB_REF#refs/tags/}
          echo "当前标签: $CURRENT_TAG"
          
          # 获取上一个tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -2 | tail -1)
          echo "上一个标签: $PREVIOUS_TAG"
          
          # 如果没有找到上一个tag，使用第一个commit
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
            echo "使用第一个commit作为起点: $PREVIOUS_TAG"
          fi
          
          # 生成commit日志
          echo "## 🚀 新功能 (Features)" > release_notes.md
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --grep="feat" --grep="add" --grep="新增" --grep="功能" -i >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 🐛 问题修复 (Bug Fixes)" >> release_notes.md
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --grep="fix" --grep="bug" --grep="修复" --grep="解决" -i >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 🔧 改进优化 (Improvements)" >> release_notes.md
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --grep="improve" --grep="enhance" --grep="优化" --grep="改进" --grep="更新" -i >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 📝 文档更新 (Documentation)" >> release_notes.md
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --grep="doc" --grep="readme" --grep="文档" -i >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 🔄 其他变更 (Other Changes)" >> release_notes.md
          # 获取所有其他commit（排除上面已经匹配的）
          git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"- %s ([%h](https://github.com/${{ github.repository }}/commit/%H))" --invert-grep --grep="feat\|add\|新增\|功能\|fix\|bug\|修复\|解决\|improve\|enhance\|优化\|改进\|更新\|doc\|readme\|文档" -i >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 📊 统计信息 (Statistics)" >> release_notes.md
          COMMIT_COUNT=$(git rev-list --count $PREVIOUS_TAG..$CURRENT_TAG)
          AUTHOR_COUNT=$(git log $PREVIOUS_TAG..$CURRENT_TAG --pretty=format:"%an" | sort -u | wc -l)
          echo "- 📈 本次发布包含 **$COMMIT_COUNT** 个提交" >> release_notes.md
          echo "- 👥 共有 **$AUTHOR_COUNT** 位贡献者参与了本次发布" >> release_notes.md
          
          echo "" >> release_notes.md
          echo "## 🔗 完整变更日志" >> release_notes.md
          echo "查看完整的变更对比: [$PREVIOUS_TAG...$CURRENT_TAG](https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG)" >> release_notes.md
          
          # 清理空的章节
          sed -i '/^## /N;/\n$/d' release_notes.md
          
          # 输出生成的release notes用于调试
          echo "生成的Release Notes:"
          cat release_notes.md
          
          # 将release notes内容保存到环境变量（处理多行文本）
          {
            echo 'RELEASE_NOTES<<EOF'
            cat release_notes.md
            echo EOF
          } >> $GITHUB_OUTPUT
      
      # 下载所有平台构建产物
      - name: 下载Windows构建产物
        uses: actions/download-artifact@v4
        with:
          name: StarBlogPublisher-windows-${{ steps.get_version.outputs.VERSION }}
          path: ./artifacts
      
      - name: 下载Linux构建产物
        uses: actions/download-artifact@v4
        with:
          name: StarBlogPublisher-linux-${{ steps.get_version.outputs.VERSION }}
          path: ./artifacts
      
      - name: 下载macOS构建产物
        uses: actions/download-artifact@v4
        with:
          name: StarBlogPublisher-macOS-${{ steps.get_version.outputs.VERSION }}
          path: ./artifacts
      
      # 列出下载的文件以确认
      - name: 列出下载的文件
        run: ls -la ./artifacts
      
      # 统一上传到GitHub Release
      - name: 上传所有文件到GitHub Release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: ./artifacts/*
          tag_name: ${{ github.ref }}
          fail_on_unmatched_files: false
          draft: false
          name: StarBlogPublisher 版本 ${{ steps.get_version.outputs.VERSION }}
          body: ${{ steps.generate_notes.outputs.RELEASE_NOTES }}
          generate_release_notes: false